1.创建项目

2.导入jar包--pom.xml(可以继承)
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>4.3.4.RELEASE</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.3.4.RELEASE</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.3.4.RELEASE</version>
    </dependency>
    
 3.配置web.xml
    <servlet>
      <servlet-name>SpringMvc</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:springmvc.xml</param-value>
      </init-param>
    </servlet>
    <servlet-mapping>
      <servlet-name>SpringMvc</servlet-name>
      <url-pattern>*.do</url-pattern><!-- 截获所有以.do结尾的请求 -->
    </servlet-mapping>
    
4.为项目添加spring支持，右键--MyEclipse--Project Facets--Install MyEclipse Report Web Runtime Facet
(在src/main/resources文件夹下创建springmvc.xml文件)

5(1).创建自己的xxxController实现Controller接口
6(1).配置springmvc.xml
    <bean name="/helloWorld" class="com.sky.controllers.HelloWorldController"></bean>
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
    
5(2).创建自己的xxxController继承AbstractController类
6(2).配置springmvc.xml
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
      <property name="mappings">
        <props>
          <prop key="/helloWorld.do">helloWorld</prop>
          <prop key="/helloShangHai.do">helloShangHai</prop>
        </props>
      </property>
    </bean><!-- 映射器 -->
    <bean id="helloShangHai" class="com.sky.controllers.HelloShangHaiController"></bean>
    <bean id="helloWorld" class="com.sky.controllers.HelloWorldController"></bean>

5(3).<!--1.BeanNameUrlHandlerMapping 处理器映射器作用  SimpleControllerHandlerAdapter 处理器适配器作用  需要实现Controller接口 -->
     <bean name="/helloWorld.do" class="com.sky.controllers.HelloWorldController" ></bean> 
     <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
6(3).<bean class="com.sky.controllers.HelloWorldController"/>|<context:component-scan base-package="com.sky.controllers">

5(全注解)配置springmvc.xml--新建Spring Bean Definition 添加nameSpace   mvc/p/context/aop/beans
        <!-- controller scanner -->
        <context:component-scan base-package="com.sky.controllers"></context:component-scan>
        <!-- start annotation driver -->
        <mvc:annotation-driven/>
6(全注解)
@Controller
public class HelloWorldController {

	@RequestMapping(value="/welcome", method=RequestMethod.GET)
	public ModelAndView welcome(HttpServletRequest req , HttpServletResponse resp, ModelMap modelmap) throws Exception {
		modelmap.put("welcome", "Hello,World!");
		return new ModelAndView("show", modelmap);
	}
	
	@RequestMapping(value="/welcome", method=RequestMethod.POST)
	public ModelAndView welcome(ModelMap modelmap) throws Exception {
		modelmap.put("welcome", "Hello,hahaha!");
		ModelAndView mav = new ModelAndView("show");
		mav.addObject(modelmap);
		return mav;
	}
}
	

7.在springmvc.xml配置视图解析器
    <!-- 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="suffix" value=".jsp"></property><!-- 后缀 -->
      <property name="prefix" value="/"></property><!-- 前缀 -->
    </bean>
    
    
Restful风格
    页面调用方法"stu/1/2.do" 
    @RequestMapping(value="stu/{id}/{pid}", method=RequestMethod.GET)
	@ResponseBody//(把返回值作为响应体对待，不作为逻辑视图名)
	public String getData(@PathVariable("pid") Integer a,@PathVariable("id") Integer b){
	    System.out.println(a+":"+b);
		return "{\"id\": 3}";//添加 Jackson-databind依赖 可以直接把字符串解析为json格式输出给前端界面
	}
	
非Restful风格
    页面调用方法"stu.do?id=3&&id=2" 
    @RequestMapping(value="stu", method=RequestMethod.GET)
	public String getData(@RequestParam("pid") Integer a,@RequestParam("id") Integer b){
	    System.out.println(a+":"+b);
		return "show";//逻辑视图名
	}
	
异常处理
  1.
  <bean id="exception" class="com.sky.exceptions.MyException"></bean>
  //异常处理类  需实现HandlerExceptionResolver并配置bean
  public class MyException implements HandlerExceptionResolver{
	@Override
	public ModelAndView resolveException(HttpServletRequest req,
			HttpServletResponse resp, Object handler, Exception e) {
		//e.printStackTrace();
		return new ModelAndView("exception");
  }
  2.此方法只能处理本controller中的请求出现的对应异常--针对单个handler而言
     在controller类中添加方法在方法上增加注解   
     --{xxxException.class,xxxException.class}表示此方法可以捕获的异常
  @Exceptionhandler({Exceptin.class})
  public ModelAndView resolveException(Exception e) {
		e.printStackTrace();
		return new ModelAndView("exception");
  }
  3.方法书写方法同2
   @ControllerAdvice
   public class MyException {
	   @ExceptionHandler({ Exception.class })
	   public String dueException(Exception e){
		   System.out.println(2222);
		   e.printStackTrace();
		   return "index";
       }
   }
   
拦截器Interceptor
  1.新建拦截器类
   public class MyInterceptor extends HandlerInterceptorAdapter{

	@Override
	public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {
		System.out.println(1);
		return 1 > 0;
	}
	@Override
	public void postHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.out.println(2);
	}
	@Override
	public void afterCompletion(HttpServletRequest request,
			HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.out.println(5);
	}
  }
  2.配置到springmvc
  <mvc:interceptors>
    <bean class="com.sky.controllers.MyInterceptor"></bean>(拦截所有请求)1
    <mvc:interceptor>
      <mvc:mapping path="/test.do"/>(指定要拦截的请求名)
      <bean class="com.sky.controllers.MyInterceptor"></bean>(拦截指定请求)2
    </mvc:interceptor>
    <mvc:interceptor>
      <mvc:mapping path="/test.do"/>(指定要拦截的请求名)
      <bean class="com.sky.controllers.MyInterceptor"></bean>(拦截指定请求)3
    </mvc:interceptor>
  </mvc:interceptors>
执行顺序:1pro-2pro-3pro-handlerAdapter-3post-2post-1post-view渲染-3after-2after-1after
       xpro return false --> xafter